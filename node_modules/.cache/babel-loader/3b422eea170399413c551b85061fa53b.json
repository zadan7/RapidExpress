{"ast":null,"code":"'use strict';\n\nvar packageJson = require('../package.json');\n\nvar PageHelper = require('./PageHelper');\n\nvar RequestResult = require('./RequestResult');\n\nvar errors = require('./errors');\n\nvar http = require('./_http');\n\nvar json = require('./_json');\n\nvar query = require('./query');\n\nvar stream = require('./stream');\n\nvar util = require('./_util');\n\nvar values = require('./values');\n\nvar notifyAboutNewVersion = util.notifyAboutNewVersion();\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?{ string: string }} options.headers\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must either be a non-negative integer, or Infinity to allow the\n *   HTTP2 session to live indefinitely (use `Client#close` to manually terminate the client).\n *   Only applicable for NodeJS environment (when http2 module is used). Default is 500ms;\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n */\n\nfunction Client(options) {\n  var http2SessionIdleTime = getHttp2SessionIdleTime();\n  options = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime: http2SessionIdleTime.value,\n    checkNewVersion: true\n  });\n  notifyAboutNewVersion(options.checkNewVersion);\n\n  if (http2SessionIdleTime.shouldOverride) {\n    options.http2SessionIdleTime = http2SessionIdleTime.value;\n  }\n\n  this._observer = options.observer;\n  this._http = new http.HttpClient(options);\n  this.stream = stream.StreamAPI(this);\n}\n/**\n * Current API version.\n *\n * @type {string}\n */\n\n\nClient.apiVersion = packageJson.apiVersion;\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\n\nClient.prototype.query = function (expression, options) {\n  return this._execute('POST', '', query.wrap(expression), null, options);\n};\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\n\n\nClient.prototype.paginate = function (expression, params, options) {\n  params = util.defaults(params, {});\n  options = util.defaults(options, {});\n  return new PageHelper(this, expression, params, options);\n};\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\n\n\nClient.prototype.ping = function (scope, timeout) {\n  return this._execute('GET', 'ping', null, {\n    scope: scope,\n    timeout: timeout\n  });\n};\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\n\n\nClient.prototype.getLastTxnTime = function () {\n  return this._http.getLastTxnTime();\n};\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\n\n\nClient.prototype.syncLastTxnTime = function (time) {\n  this._http.syncLastTxnTime(time);\n};\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\n\n\nClient.prototype.close = function (opts) {\n  return this._http.close(opts);\n};\n\nClient.prototype._execute = function (method, path, data, query, options) {\n  query = util.defaults(query, null);\n\n  if (path instanceof values.Ref || util.checkInstanceHasProperty(path, '_isFaunaRef')) {\n    path = path.value;\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query);\n  }\n\n  var startTime = Date.now();\n  var self = this;\n  var body = ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data);\n  return this._http.execute(Object.assign({}, options, {\n    path: path,\n    query: query,\n    method: method,\n    body: body\n  })).then(function (response) {\n    var endTime = Date.now();\n    var responseObject = json.parseJSON(response.body);\n    var result = new RequestResult(method, path, query, body, data, response.body, responseObject, response.status, response.headers, startTime, endTime);\n\n    self._handleRequestResult(response, result, options);\n\n    return responseObject['resource'];\n  });\n};\n\nClient.prototype._handleRequestResult = function (response, result, options) {\n  var _this = this;\n\n  var txnTimeHeaderKey = 'x-txn-time';\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10));\n  }\n\n  var observers = [this._observer, options && options.observer];\n  observers.forEach(function (observer) {\n    if (typeof observer == 'function') {\n      observer(result, _this);\n    }\n  });\n  errors.FaunaHTTPError.raiseForStatusCode(result);\n};\n\nfunction getHttp2SessionIdleTime() {\n  var fromEnv = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME');\n  var parsed = // Allow either \"Infinity\" or parsable integer string.\n  fromEnv === 'Infinity' ? Infinity : parseInt(fromEnv, 10);\n  var useEnvVar = !isNaN(parsed);\n  return {\n    shouldOverride: useEnvVar,\n    value: useEnvVar ? parsed : 500\n  };\n}\n\nmodule.exports = Client;\n\nmodule.exports.resetNotifyAboutNewVersion = function () {\n  notifyAboutNewVersion = util.notifyAboutNewVersion();\n};","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/Client.js"],"names":["packageJson","require","PageHelper","RequestResult","errors","http","json","query","stream","util","values","notifyAboutNewVersion","Client","options","http2SessionIdleTime","getHttp2SessionIdleTime","applyDefaults","domain","scheme","port","secret","timeout","observer","keepAlive","headers","fetch","undefined","queryTimeout","value","checkNewVersion","shouldOverride","_observer","_http","HttpClient","StreamAPI","apiVersion","prototype","expression","_execute","wrap","paginate","params","defaults","ping","scope","getLastTxnTime","syncLastTxnTime","time","close","opts","method","path","data","Ref","checkInstanceHasProperty","removeUndefinedValues","startTime","Date","now","self","body","indexOf","JSON","stringify","execute","Object","assign","then","response","endTime","responseObject","parseJSON","result","status","_handleRequestResult","txnTimeHeaderKey","parseInt","observers","forEach","FaunaHTTPError","raiseForStatusCode","fromEnv","getEnvVariable","parsed","Infinity","useEnvVar","isNaN","module","exports","resetNotifyAboutNewVersion"],"mappings":"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","sourcesContent":["'use strict'\n\nvar packageJson = require('../package.json')\nvar PageHelper = require('./PageHelper')\nvar RequestResult = require('./RequestResult')\nvar errors = require('./errors')\nvar http = require('./_http')\nvar json = require('./_json')\nvar query = require('./query')\nvar stream = require('./stream')\nvar util = require('./_util')\nvar values = require('./values')\n\nvar notifyAboutNewVersion = util.notifyAboutNewVersion()\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?{ string: string }} options.headers\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must either be a non-negative integer, or Infinity to allow the\n *   HTTP2 session to live indefinitely (use `Client#close` to manually terminate the client).\n *   Only applicable for NodeJS environment (when http2 module is used). Default is 500ms;\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n */\nfunction Client(options) {\n  var http2SessionIdleTime = getHttp2SessionIdleTime()\n\n  options = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime: http2SessionIdleTime.value,\n    checkNewVersion: true,\n  })\n  notifyAboutNewVersion(options.checkNewVersion)\n\n  if (http2SessionIdleTime.shouldOverride) {\n    options.http2SessionIdleTime = http2SessionIdleTime.value\n  }\n\n  this._observer = options.observer\n  this._http = new http.HttpClient(options)\n  this.stream = stream.StreamAPI(this)\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function(expression, options) {\n  return this._execute('POST', '', query.wrap(expression), null, options)\n}\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function(expression, params, options) {\n  params = util.defaults(params, {})\n  options = util.defaults(options, {})\n\n  return new PageHelper(this, expression, params, options)\n}\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function(scope, timeout) {\n  return this._execute('GET', 'ping', null, { scope: scope, timeout: timeout })\n}\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function() {\n  return this._http.getLastTxnTime()\n}\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function(time) {\n  this._http.syncLastTxnTime(time)\n}\n\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\nClient.prototype.close = function(opts) {\n  return this._http.close(opts)\n}\n\nClient.prototype._execute = function(method, path, data, query, options) {\n  query = util.defaults(query, null)\n\n  if (\n    path instanceof values.Ref ||\n    util.checkInstanceHasProperty(path, '_isFaunaRef')\n  ) {\n    path = path.value\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query)\n  }\n\n  var startTime = Date.now()\n  var self = this\n  var body =\n    ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data)\n\n  return this._http\n    .execute(\n      Object.assign({}, options, {\n        path: path,\n        query: query,\n        method: method,\n        body: body,\n      })\n    )\n    .then(function(response) {\n      var endTime = Date.now()\n      var responseObject = json.parseJSON(response.body)\n      var result = new RequestResult(\n        method,\n        path,\n        query,\n        body,\n        data,\n        response.body,\n        responseObject,\n        response.status,\n        response.headers,\n        startTime,\n        endTime\n      )\n      self._handleRequestResult(response, result, options)\n\n      return responseObject['resource']\n    })\n}\n\nClient.prototype._handleRequestResult = function(response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time'\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10))\n  }\n\n  var observers = [this._observer, options && options.observer]\n\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this)\n    }\n  })\n\n  errors.FaunaHTTPError.raiseForStatusCode(result)\n}\n\nfunction getHttp2SessionIdleTime() {\n  var fromEnv = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME')\n  var parsed =\n    // Allow either \"Infinity\" or parsable integer string.\n    fromEnv === 'Infinity' ? Infinity : parseInt(fromEnv, 10)\n  var useEnvVar = !isNaN(parsed)\n\n  return {\n    shouldOverride: useEnvVar,\n    value: useEnvVar ? parsed : 500,\n  }\n}\n\nmodule.exports = Client\nmodule.exports.resetNotifyAboutNewVersion = function() {\n  notifyAboutNewVersion = util.notifyAboutNewVersion()\n}\n"]},"metadata":{},"sourceType":"script"}