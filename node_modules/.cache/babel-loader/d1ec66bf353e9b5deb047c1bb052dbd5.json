{"ast":null,"code":"'use strict';\n\nmodule.exports = annotate;\n\nfunction annotate(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Could not parse function signature for injection dependencies: Object is not a function');\n  }\n\n  if (!fn.length) return [];\n  var injects = /^()\\(?([^)=]*)\\)? *=>/.exec(fn + '') || /^[^(]+([^ \\(]*) *\\(([^\\)]*)\\)/.exec(fn + '');\n\n  if (!injects) {\n    throw new Error('Could not parse function signature for injection dependencies: ' + fn + '');\n  }\n\n  var argumentString = injects[2] // Strip multi-line comments:\n  // Uses the lazy-quantifier (.*?): http://www.rexegg.com/regex-quantifiers.html#lazy_solution\n  .replace(/\\/\\*[\\S\\s]*?\\*\\//g, ' ') // Strip single-line comments:\n  .replace(/\\/\\/.*/g, ' ');\n\n  function groupSubArguments(_, type, keys) {\n    return type + keys.split(',').map(function (arg) {\n      return arg && arg.trim();\n    }).filter(Boolean).join('@');\n  }\n\n  argumentString = argumentString.replace(/(\\{)([^}]*)\\}/g, groupSubArguments);\n  argumentString = argumentString.replace(/(\\[)([^}]*)\\]/g, groupSubArguments);\n  return argumentString.split(',').map(function (arg) {\n    return arg && arg.trim();\n  }).map(function (arg) {\n    if (arg[0] === '{') {\n      return arg.substring(1).split('@');\n    }\n\n    if (arg[0] === '[') {\n      return {\n        items: arg.substring(1).split('@')\n      };\n    }\n\n    return arg;\n  }).filter(Boolean);\n}","map":{"version":3,"sources":["/home/verified/node_modules/fn-annotate/index.js"],"names":["module","exports","annotate","fn","Error","length","injects","exec","argumentString","replace","groupSubArguments","_","type","keys","split","map","arg","trim","filter","Boolean","join","substring","items"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAkBC,EAAlB,EAAsB;AAEpB,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAED,MAAI,CAACD,EAAE,CAACE,MAAR,EAAgB,OAAO,EAAP;AAEhB,MAAIC,OAAO,GAAG,wBAAwBC,IAAxB,CAA6BJ,EAAE,GAAG,EAAlC,KACA,gCAAgCI,IAAhC,CAAqCJ,EAAE,GAAG,EAA1C,CADd;;AAGA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIF,KAAJ,CAAU,oEAAoED,EAApE,GAAyE,EAAnF,CAAN;AACD;;AAED,MAAIK,cAAc,GAAGF,OAAO,CAAC,CAAD,CAAP,CAErB;AACA;AAHqB,GAIpBG,OAJoB,CAIZ,mBAJY,EAIS,GAJT,EAMrB;AANqB,GAOpBA,OAPoB,CAOZ,SAPY,EAOD,GAPC,CAArB;;AASA,WAASC,iBAAT,CAA2BC,CAA3B,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AACxC,WAAOD,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,GAAX,EACbC,GADa,CACT,UAAUC,GAAV,EAAe;AAClB,aAAOA,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAd;AACD,KAHa,EAIbC,MAJa,CAINC,OAJM,EAKbC,IALa,CAKR,GALQ,CAAd;AAMD;;AAEDZ,EAAAA,cAAc,GAAGA,cAAc,CAACC,OAAf,CAAuB,gBAAvB,EAAyCC,iBAAzC,CAAjB;AACAF,EAAAA,cAAc,GAAGA,cAAc,CAACC,OAAf,CAAuB,gBAAvB,EAAyCC,iBAAzC,CAAjB;AAEA,SAAOF,cAAc,CAACM,KAAf,CAAqB,GAArB,EACNC,GADM,CACF,UAAUC,GAAV,EAAe;AAClB,WAAOA,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAd;AACD,GAHM,EAINF,GAJM,CAIF,UAAUC,GAAV,EAAe;AAClB,QAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,aAAOA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBP,KAAjB,CAAuB,GAAvB,CAAP;AACD;;AACD,QAAIE,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,aAAO;AAAEM,QAAAA,KAAK,EAAEN,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBP,KAAjB,CAAuB,GAAvB;AAAT,OAAP;AACD;;AACD,WAAOE,GAAP;AACD,GAZM,EAaNE,MAbM,CAaCC,OAbD,CAAP;AAeD","sourcesContent":["'use strict';\n\nmodule.exports = annotate;\n\nfunction annotate(fn) {\n\n  if (typeof fn !== 'function') {\n    throw new Error('Could not parse function signature for injection dependencies: Object is not a function');\n  }\n\n  if (!fn.length) return [];\n\n  var injects = /^()\\(?([^)=]*)\\)? *=>/.exec(fn + '') ||\n                /^[^(]+([^ \\(]*) *\\(([^\\)]*)\\)/.exec(fn + '');\n\n  if (!injects) {\n    throw new Error('Could not parse function signature for injection dependencies: ' + fn + '');\n  }\n\n  var argumentString = injects[2]\n\n  // Strip multi-line comments:\n  // Uses the lazy-quantifier (.*?): http://www.rexegg.com/regex-quantifiers.html#lazy_solution\n  .replace(/\\/\\*[\\S\\s]*?\\*\\//g, ' ')\n\n  // Strip single-line comments:\n  .replace(/\\/\\/.*/g, ' ');\n\n  function groupSubArguments(_, type, keys) {\n    return type + keys.split(',')\n    .map(function (arg) {\n      return arg && arg.trim();\n    })\n    .filter(Boolean)\n    .join('@');\n  }\n\n  argumentString = argumentString.replace(/(\\{)([^}]*)\\}/g, groupSubArguments);\n  argumentString = argumentString.replace(/(\\[)([^}]*)\\]/g, groupSubArguments);\n\n  return argumentString.split(',')\n  .map(function (arg) {\n    return arg && arg.trim();\n  })\n  .map(function (arg) {\n    if (arg[0] === '{') {\n      return arg.substring(1).split('@');\n    }\n    if (arg[0] === '[') {\n      return { items: arg.substring(1).split('@') };\n    }\n    return arg;\n  })\n  .filter(Boolean);\n\n}\n"]},"metadata":{},"sourceType":"script"}