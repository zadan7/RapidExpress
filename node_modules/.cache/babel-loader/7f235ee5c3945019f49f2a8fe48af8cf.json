{"ast":null,"code":"'use strict';\n\nvar base64 = require('base64-js');\n\nvar deprecate = require('util-deprecate');\n\nvar errors = require('./errors');\n\nvar Expr = require('./Expr');\n\nvar util = require('./_util');\n\nvar nodeUtil = util.isNodeEnv() ? require('util') : null;\nvar customInspect = nodeUtil && nodeUtil.inspect.custom;\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify;\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\n\nfunction Value() {}\n\nValue.prototype._isFaunaValue = true;\nutil.inherits(Value, Expr);\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\n\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined');\n  this.value = {\n    id: id\n  };\n  if (collection) this.value['collection'] = collection;\n  if (database) this.value['database'] = database;\n}\n\nRef.prototype._isFaunaRef = true;\nutil.inherits(Ref, Value);\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\n\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function () {\n    return this.value['collection'];\n  }\n});\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\n\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function () {\n    return this.value['collection'];\n  }, 'class is deprecated, use collection instead')\n});\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\n\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function () {\n    return this.value['database'];\n  }\n});\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\n\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function () {\n    return this.value['id'];\n  }\n});\n/** @ignore */\n\nRef.prototype.toJSON = function () {\n  return {\n    '@ref': this.value\n  };\n};\n\nwrapToString(Ref, function () {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider'\n  };\n\n  var isNative = function (ref) {\n    return ref.collection === undefined;\n  };\n\n  var toString = function (ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : '';\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')';\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')';\n    }\n\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id];\n\n      if (constructor !== undefined) {\n        var db = ref.database !== undefined ? ', ' + ref.database.toString() : '';\n        return constructor + '(\"' + ref.id + '\"' + db + ')';\n      }\n    }\n\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")';\n  };\n\n  return toString(this);\n});\n/** @ignore */\n\nRef.prototype.valueOf = function () {\n  return this.value;\n};\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\n\n\nRef.prototype.equals = function (other) {\n  return (other instanceof Ref || util.checkInstanceHasProperty(other, '_isFaunaRef')) && this.id === other.id && (this.collection === undefined && other.collection === undefined || this.collection.equals(other.collection)) && (this.database === undefined && other.database === undefined || this.database.equals(other.database));\n};\n\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers')\n};\n\nNative.fromName = function (name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS;\n\n    case 'indexes':\n      return Native.INDEXES;\n\n    case 'databases':\n      return Native.DATABASES;\n\n    case 'functions':\n      return Native.FUNCTIONS;\n\n    case 'roles':\n      return Native.ROLES;\n\n    case 'keys':\n      return Native.KEYS;\n\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS;\n  }\n\n  return new Ref(name);\n};\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\n\n\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value;\n}\n\nutil.inherits(SetRef, Value);\nwrapToString(SetRef, function () {\n  return Expr.toString(this.value);\n});\n/** @ignore */\n\nSetRef.prototype.toJSON = function () {\n  return {\n    '@set': this.value\n  };\n};\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\n\n\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString();\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value);\n  }\n\n  this.value = value;\n}\n\nutil.inherits(FaunaTime, Value);\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\n\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function () {\n    return new Date(this.value);\n  }\n});\nwrapToString(FaunaTime, function () {\n  return 'Time(\"' + this.value + '\")';\n});\n/** @ignore */\n\nFaunaTime.prototype.toJSON = function () {\n  return {\n    '@ts': this.value\n  };\n};\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\n\n\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10);\n  }\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n\n\n  this.value = value;\n}\n\nutil.inherits(FaunaDate, Value);\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\n\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function () {\n    return new Date(this.value);\n  }\n});\nwrapToString(FaunaDate, function () {\n  return 'Date(\"' + this.value + '\")';\n});\n/** @ignore */\n\nFaunaDate.prototype.toJSON = function () {\n  return {\n    '@date': this.value\n  };\n};\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\n\n\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value);\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value);\n  } else if (value instanceof Uint8Array) {\n    this.value = value;\n  } else {\n    throw new errors.InvalidValue('Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' + stringify(value));\n  }\n}\n\nutil.inherits(Bytes, Value);\nwrapToString(Bytes, function () {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")';\n});\n/** @ignore */\n\nBytes.prototype.toJSON = function () {\n  return {\n    '@bytes': base64.fromByteArray(this.value)\n  };\n};\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\n\n\nfunction Query(value) {\n  this.value = value;\n}\n\nutil.inherits(Query, Value);\nwrapToString(Query, function () {\n  return 'Query(' + Expr.toString(this.value) + ')';\n});\n/** @ignore */\n\nQuery.prototype.toJSON = function () {\n  return {\n    '@query': this.value\n  };\n};\n/** @ignore */\n\n\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn;\n  type.prototype.inspect = fn;\n\n  if (customInspect) {\n    type.prototype[customInspect] = fn;\n  }\n}\n\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query\n};","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/values.js"],"names":["base64","require","deprecate","errors","Expr","util","nodeUtil","isNodeEnv","customInspect","inspect","custom","stringify","JSON","Value","prototype","_isFaunaValue","inherits","Ref","id","collection","database","InvalidValue","value","_isFaunaRef","Object","defineProperty","get","toJSON","wrapToString","constructors","collections","databases","indexes","functions","roles","access_providers","isNative","ref","undefined","toString","db","charAt","toUpperCase","slice","constructor","valueOf","equals","other","checkInstanceHasProperty","Native","COLLECTIONS","INDEXES","DATABASES","FUNCTIONS","ROLES","KEYS","ACCESS_PROVIDERS","fromName","name","SetRef","FaunaTime","Date","toISOString","length","FaunaDate","Bytes","ArrayBuffer","Uint8Array","toByteArray","fromByteArray","Query","type","fn","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar base64 = require('base64-js')\nvar deprecate = require('util-deprecate')\nvar errors = require('./errors')\nvar Expr = require('./Expr')\nvar util = require('./_util')\nvar nodeUtil = util.isNodeEnv() ? require('util') : null\n\nvar customInspect = nodeUtil && nodeUtil.inspect.custom\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify\n\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\nfunction Value() {}\n\nValue.prototype._isFaunaValue = true\n\nutil.inherits(Value, Expr)\n\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined')\n\n  this.value = { id: id }\n  if (collection) this.value['collection'] = collection\n  if (database) this.value['database'] = database\n}\n\nRef.prototype._isFaunaRef = true\n\nutil.inherits(Ref, Value)\n\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function() {\n    return this.value['collection']\n  },\n})\n\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function() {\n    return this.value['collection']\n  }, 'class is deprecated, use collection instead'),\n})\n\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function() {\n    return this.value['database']\n  },\n})\n\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function() {\n    return this.value['id']\n  },\n})\n\n/** @ignore */\nRef.prototype.toJSON = function() {\n  return { '@ref': this.value }\n}\n\nwrapToString(Ref, function() {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider',\n  }\n\n  var isNative = function(ref) {\n    return ref.collection === undefined\n  }\n\n  var toString = function(ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : ''\n\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')'\n\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')'\n    }\n\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id]\n      if (constructor !== undefined) {\n        var db =\n          ref.database !== undefined ? ', ' + ref.database.toString() : ''\n        return constructor + '(\"' + ref.id + '\"' + db + ')'\n      }\n    }\n\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")'\n  }\n\n  return toString(this)\n})\n\n/** @ignore */\nRef.prototype.valueOf = function() {\n  return this.value\n}\n\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\nRef.prototype.equals = function(other) {\n  return (\n    (other instanceof Ref ||\n      util.checkInstanceHasProperty(other, '_isFaunaRef')) &&\n    this.id === other.id &&\n    ((this.collection === undefined && other.collection === undefined) ||\n      this.collection.equals(other.collection)) &&\n    ((this.database === undefined && other.database === undefined) ||\n      this.database.equals(other.database))\n  )\n}\n\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers'),\n}\n\nNative.fromName = function(name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS\n    case 'indexes':\n      return Native.INDEXES\n    case 'databases':\n      return Native.DATABASES\n    case 'functions':\n      return Native.FUNCTIONS\n    case 'roles':\n      return Native.ROLES\n    case 'keys':\n      return Native.KEYS\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS\n  }\n  return new Ref(name)\n}\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value\n}\n\nutil.inherits(SetRef, Value)\n\nwrapToString(SetRef, function() {\n  return Expr.toString(this.value)\n})\n\n/** @ignore */\nSetRef.prototype.toJSON = function() {\n  return { '@set': this.value }\n}\n\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString()\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value)\n  }\n\n  this.value = value\n}\n\nutil.inherits(FaunaTime, Value)\n\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaTime, function() {\n  return 'Time(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaTime.prototype.toJSON = function() {\n  return { '@ts': this.value }\n}\n\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10)\n  }\n\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n  this.value = value\n}\n\nutil.inherits(FaunaDate, Value)\n\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaDate, function() {\n  return 'Date(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaDate.prototype.toJSON = function() {\n  return { '@date': this.value }\n}\n\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value)\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value)\n  } else if (value instanceof Uint8Array) {\n    this.value = value\n  } else {\n    throw new errors.InvalidValue(\n      'Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' +\n        stringify(value)\n    )\n  }\n}\n\nutil.inherits(Bytes, Value)\n\nwrapToString(Bytes, function() {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")'\n})\n\n/** @ignore */\nBytes.prototype.toJSON = function() {\n  return { '@bytes': base64.fromByteArray(this.value) }\n}\n\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\nfunction Query(value) {\n  this.value = value\n}\n\nutil.inherits(Query, Value)\n\nwrapToString(Query, function() {\n  return 'Query(' + Expr.toString(this.value) + ')'\n})\n\n/** @ignore */\nQuery.prototype.toJSON = function() {\n  return { '@query': this.value }\n}\n\n/** @ignore */\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn\n  type.prototype.inspect = fn\n\n  if (customInspect) {\n    type.prototype[customInspect] = fn\n  }\n}\n\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query,\n}\n"]},"metadata":{},"sourceType":"script"}