{"ast":null,"code":"'use strict';\n\nvar query = require('./query');\n\nvar objectAssign = require('object-assign');\n/**\n * A FaunaDB Lambda expression to be passed into one of the collection\n * functions: Map or Filter.\n *\n * @callback PageHelper~collectionFunction\n * @param {any} var\n *   The variable passed in by FaunaDB when this Lambda\n *   function is executed.\n * @return {Expr}\n *   The FaunaDB query expression to be returned by this Lambda.\n */\n\n/**\n * @callback PageHelper~eachFunction\n * @param {Object} page\n *   A page returned by FaunaDB's Paginate function.\n */\n\n/**\n * A wrapper that provides a helpful API for consuming FaunaDB pages.\n *\n * Generally this is constructed through the {@link Client#paginate} method.\n *\n * The {@link PageHelper#map} and {@link PageHelper#filter} methods will wrap the underlying query with a Map\n * and Filter query function, respectively. These will be executed on the server when a promise-returning function\n * is called.\n *\n * The {@link PageHelper#each} and {@link PageHelper#eachReverse} functions dispatch queries to FaunaDB, and return Promises\n * representing the completion of those queries. The callbacks provided to these functions are executed locally when the\n * queries return.\n *\n * The {@link PageHelper#nextPage} and {@link PageHelper#previousPage} functions also dispatch queries to FaunaDB,\n * but return their responses in a wrapped Promise.\n *\n * @param {Client} client\n *   The FaunaDB client used to paginate.\n * @param {Object} set\n *   The set to paginate.\n * @param {?Object} params\n *   Parameters to be passed to the FaunaDB Paginate function.\n * @param {?Object} options\n *   Object that configures the current pagination, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @constructor\n */\n\n\nfunction PageHelper(client, set, params, options) {\n  if (params === undefined) {\n    params = {};\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  this.reverse = false;\n  this.params = {};\n  this.before = undefined;\n  this.after = undefined;\n  objectAssign(this.params, params);\n  var cursorParams = this.params.cursor || this.params;\n\n  if ('before' in cursorParams) {\n    this.before = cursorParams.before;\n    delete cursorParams.before;\n  } else if ('after' in cursorParams) {\n    this.after = cursorParams.after;\n    delete cursorParams.after;\n  }\n\n  this.options = {};\n  objectAssign(this.options, options);\n  this.client = client;\n  this.set = set;\n  /**\n   * @member {Array.<Function>}\n   * @type {Array.<Function>}\n   * @private\n   */\n\n  this._faunaFunctions = [];\n}\n/**\n * Wraps the set to be paginated with a FaunaDB Map function.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The Lambda expression to be passed into the Map function.\n * @return {PageHelper}\n *\n */\n\n\nPageHelper.prototype.map = function (lambda) {\n  var rv = this._clone();\n\n  rv._faunaFunctions.push(function (q) {\n    return query.Map(q, lambda);\n  });\n\n  return rv;\n};\n/**\n * Wraps the set to be paginated with a FaunaDB Filter funciton.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The lambda expression to be passed into the Filter function.\n * @return {PageHelper}\n */\n\n\nPageHelper.prototype.filter = function (lambda) {\n  var rv = this._clone();\n\n  rv._faunaFunctions.push(function (q) {\n    return query.Filter(q, lambda);\n  });\n\n  return rv;\n};\n/**\n * Executes the provided function for each page.\n *\n * @param {PageHelper~eachFunction} lambda\n *   A function to be executed for each page.\n * @returns {external:Promise.<void>}\n */\n\n\nPageHelper.prototype.each = function (lambda) {\n  return this._retrieveNextPage(this.after, false).then(this._consumePages(lambda, false));\n};\n/**\n * Executes the provided function for each page, in the reverse direction.\n * @param {PageHelper~eachFunction} lambda\n * @returns {external:Promise.<void>}\n */\n\n\nPageHelper.prototype.eachReverse = function (lambda) {\n  return this._retrieveNextPage(this.before, true).then(this._consumePages(lambda, true));\n};\n/**\n * Queries for the previous page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\n\n\nPageHelper.prototype.previousPage = function () {\n  var self = this;\n  return this._retrieveNextPage(this.before, true).then(this._adjustCursors.bind(self));\n};\n/**\n * Queries for the next page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\n\n\nPageHelper.prototype.nextPage = function () {\n  var self = this;\n  return this._retrieveNextPage(this.after, false).then(this._adjustCursors.bind(self));\n};\n\nPageHelper.prototype._adjustCursors = function (page) {\n  if (page.after !== undefined) {\n    this.after = page.after;\n  }\n\n  if (page.before !== undefined) {\n    this.before = page.before;\n  }\n\n  return page.data;\n};\n\nPageHelper.prototype._consumePages = function (lambda, reverse) {\n  var self = this;\n  return function (page) {\n    var data = [];\n    page.data.forEach(function (item) {\n      if (item.document) {\n        item.instance = item.document;\n      }\n\n      if (item.value && item.value.document) {\n        item.value.instance = item.value.document;\n      }\n\n      data.push(item);\n    });\n    lambda(data);\n    var nextCursor;\n\n    if (reverse) {\n      nextCursor = page.before;\n    } else {\n      nextCursor = page.after;\n    }\n\n    if (nextCursor !== undefined) {\n      return self._retrieveNextPage(nextCursor, reverse).then(self._consumePages(lambda, reverse));\n    } else {\n      return Promise.resolve();\n    }\n  };\n};\n/**\n *\n * @returns {external:Promise.<Object>}\n * @private\n */\n\n\nPageHelper.prototype._retrieveNextPage = function (cursor, reverse) {\n  var opts = {};\n  objectAssign(opts, this.params);\n  var cursorOpts = opts.cursor || opts;\n\n  if (cursor !== undefined) {\n    if (reverse) {\n      cursorOpts.before = cursor;\n    } else {\n      cursorOpts.after = cursor;\n    }\n  } else {\n    if (reverse) {\n      cursorOpts.before = null;\n    }\n  }\n\n  var q = query.Paginate(this.set, opts);\n\n  if (this._faunaFunctions.length > 0) {\n    this._faunaFunctions.forEach(function (lambda) {\n      q = lambda(q);\n    });\n  }\n\n  return this.client.query(q, this.options);\n};\n/**\n * @private\n * @returns {PageHelper}\n */\n\n\nPageHelper.prototype._clone = function () {\n  return Object.create(PageHelper.prototype, {\n    client: {\n      value: this.client\n    },\n    set: {\n      value: this.set\n    },\n    _faunaFunctions: {\n      value: this._faunaFunctions\n    },\n    before: {\n      value: this.before\n    },\n    after: {\n      value: this.after\n    },\n    params: {\n      value: this.params\n    }\n  });\n};\n\nmodule.exports = PageHelper;","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/PageHelper.js"],"names":["query","require","objectAssign","PageHelper","client","set","params","options","undefined","reverse","before","after","cursorParams","cursor","_faunaFunctions","prototype","map","lambda","rv","_clone","push","q","Map","filter","Filter","each","_retrieveNextPage","then","_consumePages","eachReverse","previousPage","self","_adjustCursors","bind","nextPage","page","data","forEach","item","document","instance","value","nextCursor","Promise","resolve","opts","cursorOpts","Paginate","length","Object","create","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar query = require('./query')\nvar objectAssign = require('object-assign')\n\n/**\n * A FaunaDB Lambda expression to be passed into one of the collection\n * functions: Map or Filter.\n *\n * @callback PageHelper~collectionFunction\n * @param {any} var\n *   The variable passed in by FaunaDB when this Lambda\n *   function is executed.\n * @return {Expr}\n *   The FaunaDB query expression to be returned by this Lambda.\n */\n\n/**\n * @callback PageHelper~eachFunction\n * @param {Object} page\n *   A page returned by FaunaDB's Paginate function.\n */\n\n/**\n * A wrapper that provides a helpful API for consuming FaunaDB pages.\n *\n * Generally this is constructed through the {@link Client#paginate} method.\n *\n * The {@link PageHelper#map} and {@link PageHelper#filter} methods will wrap the underlying query with a Map\n * and Filter query function, respectively. These will be executed on the server when a promise-returning function\n * is called.\n *\n * The {@link PageHelper#each} and {@link PageHelper#eachReverse} functions dispatch queries to FaunaDB, and return Promises\n * representing the completion of those queries. The callbacks provided to these functions are executed locally when the\n * queries return.\n *\n * The {@link PageHelper#nextPage} and {@link PageHelper#previousPage} functions also dispatch queries to FaunaDB,\n * but return their responses in a wrapped Promise.\n *\n * @param {Client} client\n *   The FaunaDB client used to paginate.\n * @param {Object} set\n *   The set to paginate.\n * @param {?Object} params\n *   Parameters to be passed to the FaunaDB Paginate function.\n * @param {?Object} options\n *   Object that configures the current pagination, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @constructor\n */\nfunction PageHelper(client, set, params, options) {\n  if (params === undefined) {\n    params = {}\n  }\n\n  if (options === undefined) {\n    options = {}\n  }\n\n  this.reverse = false\n  this.params = {}\n\n  this.before = undefined\n  this.after = undefined\n\n  objectAssign(this.params, params)\n\n  var cursorParams = this.params.cursor || this.params\n\n  if ('before' in cursorParams) {\n    this.before = cursorParams.before\n    delete cursorParams.before\n  } else if ('after' in cursorParams) {\n    this.after = cursorParams.after\n    delete cursorParams.after\n  }\n\n  this.options = {}\n  objectAssign(this.options, options)\n\n  this.client = client\n  this.set = set\n\n  /**\n   * @member {Array.<Function>}\n   * @type {Array.<Function>}\n   * @private\n   */\n  this._faunaFunctions = []\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Map function.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The Lambda expression to be passed into the Map function.\n * @return {PageHelper}\n *\n */\nPageHelper.prototype.map = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Map(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Filter funciton.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The lambda expression to be passed into the Filter function.\n * @return {PageHelper}\n */\nPageHelper.prototype.filter = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Filter(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Executes the provided function for each page.\n *\n * @param {PageHelper~eachFunction} lambda\n *   A function to be executed for each page.\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.each = function(lambda) {\n  return this._retrieveNextPage(this.after, false).then(\n    this._consumePages(lambda, false)\n  )\n}\n\n/**\n * Executes the provided function for each page, in the reverse direction.\n * @param {PageHelper~eachFunction} lambda\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.eachReverse = function(lambda) {\n  return this._retrieveNextPage(this.before, true).then(\n    this._consumePages(lambda, true)\n  )\n}\n\n/**\n * Queries for the previous page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.previousPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.before, true).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\n/**\n * Queries for the next page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.nextPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.after, false).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\nPageHelper.prototype._adjustCursors = function(page) {\n  if (page.after !== undefined) {\n    this.after = page.after\n  }\n\n  if (page.before !== undefined) {\n    this.before = page.before\n  }\n\n  return page.data\n}\n\nPageHelper.prototype._consumePages = function(lambda, reverse) {\n  var self = this\n  return function(page) {\n    var data = []\n    page.data.forEach(function(item) {\n      if (item.document) {\n        item.instance = item.document\n      }\n      if (item.value && item.value.document) {\n        item.value.instance = item.value.document\n      }\n      data.push(item)\n    })\n    lambda(data)\n\n    var nextCursor\n    if (reverse) {\n      nextCursor = page.before\n    } else {\n      nextCursor = page.after\n    }\n\n    if (nextCursor !== undefined) {\n      return self\n        ._retrieveNextPage(nextCursor, reverse)\n        .then(self._consumePages(lambda, reverse))\n    } else {\n      return Promise.resolve()\n    }\n  }\n}\n\n/**\n *\n * @returns {external:Promise.<Object>}\n * @private\n */\nPageHelper.prototype._retrieveNextPage = function(cursor, reverse) {\n  var opts = {}\n  objectAssign(opts, this.params)\n  var cursorOpts = opts.cursor || opts\n\n  if (cursor !== undefined) {\n    if (reverse) {\n      cursorOpts.before = cursor\n    } else {\n      cursorOpts.after = cursor\n    }\n  } else {\n    if (reverse) {\n      cursorOpts.before = null\n    }\n  }\n\n  var q = query.Paginate(this.set, opts)\n\n  if (this._faunaFunctions.length > 0) {\n    this._faunaFunctions.forEach(function(lambda) {\n      q = lambda(q)\n    })\n  }\n\n  return this.client.query(q, this.options)\n}\n\n/**\n * @private\n * @returns {PageHelper}\n */\nPageHelper.prototype._clone = function() {\n  return Object.create(PageHelper.prototype, {\n    client: { value: this.client },\n    set: { value: this.set },\n    _faunaFunctions: { value: this._faunaFunctions },\n    before: { value: this.before },\n    after: { value: this.after },\n    params: { value: this.params },\n  })\n}\n\nmodule.exports = PageHelper\n"]},"metadata":{},"sourceType":"script"}