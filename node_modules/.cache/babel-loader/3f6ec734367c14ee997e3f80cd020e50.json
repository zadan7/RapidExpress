{"ast":null,"code":"'use strict';\n\nvar json = require('./_json');\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\n\n\nfunction logger(loggerFunction) {\n  return function (requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client);\n  };\n}\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\n\n\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n      method = requestResult.method,\n      path = requestResult.path,\n      requestContent = requestResult.requestContent,\n      responseHeaders = requestResult.responseHeaders,\n      responseContent = requestResult.responseContent,\n      statusCode = requestResult.statusCode,\n      timeTaken = requestResult.timeTaken;\n  var out = '';\n\n  function log(str) {\n    out = out + str;\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n');\n\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n');\n  }\n\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n');\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n');\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n');\n  return out;\n}\n\nfunction _indent(str) {\n  var indentStr = '  ';\n  return str.split('\\n').join('\\n' + indentStr);\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true));\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return '';\n  }\n\n  var keys = Object.keys(query);\n\n  if (keys.length === 0) {\n    return '';\n  }\n\n  var pairs = keys.map(function (key) {\n    return key + '=' + query[key];\n  });\n  return '?' + pairs.join('&');\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult\n};","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/clientLogger.js"],"names":["json","require","logger","loggerFunction","requestResult","client","showRequestResult","query","method","path","requestContent","responseHeaders","responseContent","statusCode","timeTaken","out","log","str","_queryString","_showJSON","_indent","indentStr","split","join","object","toJSON","keys","Object","length","pairs","map","key","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar json = require('./_json')\n\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\nfunction logger(loggerFunction) {\n  return function(requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client)\n  }\n}\n\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n    method = requestResult.method,\n    path = requestResult.path,\n    requestContent = requestResult.requestContent,\n    responseHeaders = requestResult.responseHeaders,\n    responseContent = requestResult.responseContent,\n    statusCode = requestResult.statusCode,\n    timeTaken = requestResult.timeTaken\n\n  var out = ''\n\n  function log(str) {\n    out = out + str\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n')\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n')\n  }\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n')\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n')\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n')\n\n  return out\n}\n\nfunction _indent(str) {\n  var indentStr = '  '\n  return str.split('\\n').join('\\n' + indentStr)\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true))\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return ''\n  }\n\n  var keys = Object.keys(query)\n  if (keys.length === 0) {\n    return ''\n  }\n\n  var pairs = keys.map(function(key) {\n    return key + '=' + query[key]\n  })\n  return '?' + pairs.join('&')\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult,\n}\n"]},"metadata":{},"sourceType":"script"}