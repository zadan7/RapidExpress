{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n/**\n * A representation of a FaunaDB Query Expression. Generally, you shouldn't need\n * to use this class directly; use the Query helpers defined in {@link module:query}.\n *\n * @param {Object} obj The object that represents a Query to be treated as an Expression.\n * @constructor\n */\n\n\nfunction Expr(obj) {\n  this.raw = obj;\n}\n\nExpr.prototype._isFaunaExpr = true;\n\nExpr.prototype.toJSON = function () {\n  return this.raw;\n};\n\nExpr.prototype.toFQL = function () {\n  return exprToString(this.raw);\n};\n\nvar varArgsFunctions = ['Do', 'Call', 'Union', 'Intersection', 'Difference', 'Equals', 'Add', 'BitAnd', 'BitOr', 'BitXor', 'Divide', 'Max', 'Min', 'Modulo', 'Multiply', 'Subtract', 'LT', 'LTE', 'GT', 'GTE', 'And', 'Or']; // FQL function names come across the wire as all lowercase letters\n// (like the key of this object). Not all are properly snake-cased\n// on the Core side, which causes improper capitalizations.\n//\n// JS Driver patch: https://faunadb.atlassian.net/browse/FE-540\n// Core update: https://faunadb.atlassian.net/browse/ENG-2110\n\nvar specialCases = {\n  containsstrregex: 'ContainsStrRegex',\n  endswith: 'EndsWith',\n  findstr: 'FindStr',\n  findstrregex: 'FindStrRegex',\n  gt: 'GT',\n  gte: 'GTE',\n  is_nonempty: 'is_non_empty',\n  lowercase: 'LowerCase',\n  lt: 'LT',\n  lte: 'LTE',\n  ltrim: 'LTrim',\n  ngram: 'NGram',\n  rtrim: 'RTrim',\n  regexescape: 'RegexEscape',\n  replacestr: 'ReplaceStr',\n  replacestrregex: 'ReplaceStrRegex',\n  startswith: 'StartsWith',\n  substring: 'SubString',\n  titlecase: 'TitleCase',\n  uppercase: 'UpperCase'\n};\n/**\n *\n * @param {Expr} expression A FQL expression\n * @returns {Boolean} Returns true for valid expressions\n * @private\n */\n\nfunction isExpr(expression) {\n  return expression instanceof Expr || util.checkInstanceHasProperty(expression, '_isFaunaExpr');\n}\n/**\n *\n * @param {Object} obj An object to print\n * @returns {String} String representation of object\n * @private\n */\n\n\nfunction printObject(obj) {\n  return '{' + Object.keys(obj).map(function (k) {\n    return '\"' + k + '\"' + ': ' + exprToString(obj[k]);\n  }).join(', ') + '}';\n}\n/**\n *\n * @param {Array} arr An array to print\n * @param {Function} toStr Function used for stringification\n * @returns {String} String representation of array\n * @private\n */\n\n\nfunction printArray(arr, toStr) {\n  return arr.map(function (item) {\n    return toStr(item);\n  }).join(', ');\n}\n/**\n *\n * @param {String} fn A snake-case FQL function name\n * @returns {String} The correpsonding camel-cased FQL function name\n * @private\n */\n\n\nfunction convertToCamelCase(fn) {\n  // For FQL functions with special formatting concerns, we\n  // use the specialCases object above to define their casing.\n  if (fn in specialCases) fn = specialCases[fn];\n  return fn.split('_').map(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }).join('');\n}\n\nvar exprToString = function (expr, caller) {\n  // If expr is a Expr, we want to parse expr.raw instead\n  if (isExpr(expr)) {\n    if ('value' in expr) return expr.toString();\n    expr = expr.raw;\n  } // Return early to avoid extra work if null\n\n\n  if (expr === null) {\n    return 'null';\n  } // Return stringified value if expression is not an Object or Array\n\n\n  switch (typeof expr) {\n    case 'string':\n      return JSON.stringify(expr);\n\n    case 'symbol':\n    case 'number':\n    case 'boolean':\n      return expr.toString();\n\n    case 'undefined':\n      return 'undefined';\n  } // Handle expression Arrays\n\n\n  if (Array.isArray(expr)) {\n    var array = printArray(expr, exprToString);\n    return varArgsFunctions.indexOf(caller) != -1 ? array : '[' + array + ']';\n  } // Parse expression Objects\n\n\n  if ('match' in expr) {\n    var matchStr = exprToString(expr['match']);\n    var terms = expr['terms'] || [];\n    if (isExpr(terms)) terms = terms.raw;\n    if (Array.isArray(terms) && terms.length == 0) return 'Match(' + matchStr + ')';\n\n    if (Array.isArray(terms)) {\n      return 'Match(' + matchStr + ', [' + printArray(terms, exprToString) + '])';\n    }\n\n    return 'Match(' + matchStr + ', ' + exprToString(terms) + ')';\n  }\n\n  if ('paginate' in expr) {\n    var exprKeys = Object.keys(expr);\n\n    if (exprKeys.length === 1) {\n      return 'Paginate(' + exprToString(expr['paginate']) + ')';\n    }\n\n    var expr2 = Object.assign({}, expr);\n    delete expr2['paginate'];\n    return 'Paginate(' + exprToString(expr['paginate']) + ', ' + printObject(expr2) + ')';\n  }\n\n  if ('let' in expr && 'in' in expr) {\n    var letExpr = '';\n    if (Array.isArray(expr['let'])) letExpr = '[' + printArray(expr['let'], printObject) + ']';else letExpr = printObject(expr['let']);\n    return 'Let(' + letExpr + ', ' + exprToString(expr['in']) + ')';\n  }\n\n  if ('object' in expr) return printObject(expr['object']);\n\n  if ('merge' in expr) {\n    if (expr.lambda) {\n      return 'Merge(' + exprToString(expr.merge) + ', ' + exprToString(expr.with) + ', ' + exprToString(expr.lambda) + ')';\n    }\n\n    return 'Merge(' + exprToString(expr.merge) + ', ' + exprToString(expr.with) + ')';\n  }\n\n  if ('lambda' in expr) {\n    return 'Lambda(' + exprToString(expr['lambda']) + ', ' + exprToString(expr['expr']) + ')';\n  }\n\n  if ('filter' in expr) {\n    return 'Filter(' + exprToString(expr['collection']) + ', ' + exprToString(expr['filter']) + ')';\n  }\n\n  if ('call' in expr) {\n    return 'Call(' + exprToString(expr['call']) + ', ' + exprToString(expr['arguments']) + ')';\n  }\n\n  if ('map' in expr) {\n    return 'Map(' + exprToString(expr['collection']) + ', ' + exprToString(expr['map']) + ')';\n  }\n\n  if ('foreach' in expr) {\n    return 'Foreach(' + exprToString(expr['collection']) + ', ' + exprToString(expr['foreach']) + ')';\n  }\n\n  var keys = Object.keys(expr);\n  var fn = keys[0];\n  fn = convertToCamelCase(fn); // The filter prevents zero arity functions from having a null argument\n  // This only works under the assumptions\n  // that there are no functions where a single 'null' argument makes sense.\n\n  var args = keys.filter(k => expr[k] !== null || keys.length > 1).map(k => exprToString(expr[k], fn)).join(', ');\n  return fn + '(' + args + ')';\n};\n\nExpr.toString = exprToString;\nmodule.exports = Expr;","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/Expr.js"],"names":["util","require","Expr","obj","raw","prototype","_isFaunaExpr","toJSON","toFQL","exprToString","varArgsFunctions","specialCases","containsstrregex","endswith","findstr","findstrregex","gt","gte","is_nonempty","lowercase","lt","lte","ltrim","ngram","rtrim","regexescape","replacestr","replacestrregex","startswith","substring","titlecase","uppercase","isExpr","expression","checkInstanceHasProperty","printObject","Object","keys","map","k","join","printArray","arr","toStr","item","convertToCamelCase","fn","split","str","charAt","toUpperCase","slice","expr","caller","toString","JSON","stringify","Array","isArray","array","indexOf","matchStr","terms","length","exprKeys","expr2","assign","letExpr","lambda","merge","with","args","filter","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar util = require('./_util')\n\n/**\n * A representation of a FaunaDB Query Expression. Generally, you shouldn't need\n * to use this class directly; use the Query helpers defined in {@link module:query}.\n *\n * @param {Object} obj The object that represents a Query to be treated as an Expression.\n * @constructor\n */\nfunction Expr(obj) {\n  this.raw = obj\n}\n\nExpr.prototype._isFaunaExpr = true\n\nExpr.prototype.toJSON = function() {\n  return this.raw\n}\n\nExpr.prototype.toFQL = function() {\n  return exprToString(this.raw)\n}\n\nvar varArgsFunctions = [\n  'Do',\n  'Call',\n  'Union',\n  'Intersection',\n  'Difference',\n  'Equals',\n  'Add',\n  'BitAnd',\n  'BitOr',\n  'BitXor',\n  'Divide',\n  'Max',\n  'Min',\n  'Modulo',\n  'Multiply',\n  'Subtract',\n  'LT',\n  'LTE',\n  'GT',\n  'GTE',\n  'And',\n  'Or',\n]\n\n// FQL function names come across the wire as all lowercase letters\n// (like the key of this object). Not all are properly snake-cased\n// on the Core side, which causes improper capitalizations.\n//\n// JS Driver patch: https://faunadb.atlassian.net/browse/FE-540\n// Core update: https://faunadb.atlassian.net/browse/ENG-2110\n\nvar specialCases = {\n  containsstrregex: 'ContainsStrRegex',\n  endswith: 'EndsWith',\n  findstr: 'FindStr',\n  findstrregex: 'FindStrRegex',\n  gt: 'GT',\n  gte: 'GTE',\n  is_nonempty: 'is_non_empty',\n  lowercase: 'LowerCase',\n  lt: 'LT',\n  lte: 'LTE',\n  ltrim: 'LTrim',\n  ngram: 'NGram',\n  rtrim: 'RTrim',\n  regexescape: 'RegexEscape',\n  replacestr: 'ReplaceStr',\n  replacestrregex: 'ReplaceStrRegex',\n  startswith: 'StartsWith',\n  substring: 'SubString',\n  titlecase: 'TitleCase',\n  uppercase: 'UpperCase',\n}\n\n/**\n *\n * @param {Expr} expression A FQL expression\n * @returns {Boolean} Returns true for valid expressions\n * @private\n */\nfunction isExpr(expression) {\n  return (\n    expression instanceof Expr ||\n    util.checkInstanceHasProperty(expression, '_isFaunaExpr')\n  )\n}\n\n/**\n *\n * @param {Object} obj An object to print\n * @returns {String} String representation of object\n * @private\n */\nfunction printObject(obj) {\n  return (\n    '{' +\n    Object.keys(obj)\n      .map(function(k) {\n        return '\"' + k + '\"' + ': ' + exprToString(obj[k])\n      })\n      .join(', ') +\n    '}'\n  )\n}\n\n/**\n *\n * @param {Array} arr An array to print\n * @param {Function} toStr Function used for stringification\n * @returns {String} String representation of array\n * @private\n */\nfunction printArray(arr, toStr) {\n  return arr\n    .map(function(item) {\n      return toStr(item)\n    })\n    .join(', ')\n}\n\n/**\n *\n * @param {String} fn A snake-case FQL function name\n * @returns {String} The correpsonding camel-cased FQL function name\n * @private\n */\nfunction convertToCamelCase(fn) {\n  // For FQL functions with special formatting concerns, we\n  // use the specialCases object above to define their casing.\n  if (fn in specialCases) fn = specialCases[fn]\n\n  return fn\n    .split('_')\n    .map(function(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1)\n    })\n    .join('')\n}\n\nvar exprToString = function(expr, caller) {\n  // If expr is a Expr, we want to parse expr.raw instead\n  if (isExpr(expr)) {\n    if ('value' in expr) return expr.toString()\n    expr = expr.raw\n  }\n\n  // Return early to avoid extra work if null\n  if (expr === null) {\n    return 'null'\n  }\n\n  // Return stringified value if expression is not an Object or Array\n  switch (typeof expr) {\n    case 'string':\n      return JSON.stringify(expr)\n    case 'symbol':\n    case 'number':\n    case 'boolean':\n      return expr.toString()\n    case 'undefined':\n      return 'undefined'\n  }\n\n  // Handle expression Arrays\n  if (Array.isArray(expr)) {\n    var array = printArray(expr, exprToString)\n    return varArgsFunctions.indexOf(caller) != -1 ? array : '[' + array + ']'\n  }\n\n  // Parse expression Objects\n  if ('match' in expr) {\n    var matchStr = exprToString(expr['match'])\n    var terms = expr['terms'] || []\n\n    if (isExpr(terms)) terms = terms.raw\n\n    if (Array.isArray(terms) && terms.length == 0)\n      return 'Match(' + matchStr + ')'\n\n    if (Array.isArray(terms)) {\n      return (\n        'Match(' + matchStr + ', [' + printArray(terms, exprToString) + '])'\n      )\n    }\n\n    return 'Match(' + matchStr + ', ' + exprToString(terms) + ')'\n  }\n\n  if ('paginate' in expr) {\n    var exprKeys = Object.keys(expr)\n    if (exprKeys.length === 1) {\n      return 'Paginate(' + exprToString(expr['paginate']) + ')'\n    }\n\n    var expr2 = Object.assign({}, expr)\n    delete expr2['paginate']\n\n    return (\n      'Paginate(' +\n      exprToString(expr['paginate']) +\n      ', ' +\n      printObject(expr2) +\n      ')'\n    )\n  }\n\n  if ('let' in expr && 'in' in expr) {\n    var letExpr = ''\n\n    if (Array.isArray(expr['let']))\n      letExpr = '[' + printArray(expr['let'], printObject) + ']'\n    else letExpr = printObject(expr['let'])\n\n    return 'Let(' + letExpr + ', ' + exprToString(expr['in']) + ')'\n  }\n\n  if ('object' in expr) return printObject(expr['object'])\n\n  if ('merge' in expr) {\n    if (expr.lambda) {\n      return (\n        'Merge(' +\n        exprToString(expr.merge) +\n        ', ' +\n        exprToString(expr.with) +\n        ', ' +\n        exprToString(expr.lambda) +\n        ')'\n      )\n    }\n\n    return (\n      'Merge(' + exprToString(expr.merge) + ', ' + exprToString(expr.with) + ')'\n    )\n  }\n\n  if ('lambda' in expr) {\n    return (\n      'Lambda(' +\n      exprToString(expr['lambda']) +\n      ', ' +\n      exprToString(expr['expr']) +\n      ')'\n    )\n  }\n\n  if ('filter' in expr) {\n    return (\n      'Filter(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['filter']) +\n      ')'\n    )\n  }\n\n  if ('call' in expr) {\n    return (\n      'Call(' +\n      exprToString(expr['call']) +\n      ', ' +\n      exprToString(expr['arguments']) +\n      ')'\n    )\n  }\n\n  if ('map' in expr) {\n    return (\n      'Map(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['map']) +\n      ')'\n    )\n  }\n\n  if ('foreach' in expr) {\n    return (\n      'Foreach(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['foreach']) +\n      ')'\n    )\n  }\n\n  var keys = Object.keys(expr)\n  var fn = keys[0]\n  fn = convertToCamelCase(fn)\n\n  // The filter prevents zero arity functions from having a null argument\n  // This only works under the assumptions\n  // that there are no functions where a single 'null' argument makes sense.\n  var args = keys\n    .filter(k => expr[k] !== null || keys.length > 1)\n    .map(k => exprToString(expr[k], fn))\n    .join(', ')\n\n  return fn + '(' + args + ')'\n}\n\nExpr.toString = exprToString\n\nmodule.exports = Expr\n"]},"metadata":{},"sourceType":"script"}