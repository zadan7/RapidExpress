{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\n\n\nfunction FaunaError(name, message, description) {\n  Error.call(this);\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n\n  this.name = name;\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n\n  this.message = message;\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n\n  this.description = description;\n}\n\nutil.inherits(FaunaError, Error);\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message);\n}\n\nutil.inherits(InvalidValue, FaunaError);\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = \"\".concat(callerFunc, \" function requires \").concat(messageForArity(min, max), \" argument(s) but \").concat(actual, \" were given\");\n  var documentationLink = logDocumentationLink(callerFunc);\n  FaunaError.call(this, 'InvalidArity', \"\".concat(arityInfo, \"\\n\").concat(documentationLink));\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n\n  this.min = min;\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n\n  this.max = max;\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n\n  this.actual = actual;\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min;\n    if (min === null) return 'up to ' + max;\n    if (min === max) return min;\n    return 'from ' + min + ' to ' + max;\n  }\n\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/';\n    return \"For more info, see the docs: \".concat(docsURL).concat(functionName.toLowerCase());\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError);\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent;\n  var errors = response.errors;\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code;\n  var description = errors.length === 0 ? '(empty \"errors\")' : errors[0].description;\n  FaunaError.call(this, name, message, description);\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n\n  this.requestResult = requestResult;\n}\n\nutil.inherits(FaunaHTTPError, FaunaError);\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\n\nFaunaHTTPError.prototype.errors = function () {\n  return this.requestResult.responseContent.errors;\n};\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\n\n\nFaunaHTTPError.raiseForStatusCode = function (requestResult) {\n  var code = requestResult.statusCode;\n\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult);\n\n      case 401:\n        throw new Unauthorized(requestResult);\n\n      case 403:\n        throw new PermissionDenied(requestResult);\n\n      case 404:\n        throw new NotFound(requestResult);\n\n      case 405:\n        throw new MethodNotAllowed(requestResult);\n\n      case 429:\n        throw new TooManyRequests(requestResult);\n\n      case 500:\n        throw new InternalError(requestResult);\n\n      case 503:\n        throw new UnavailableError(requestResult);\n\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult);\n    }\n  }\n};\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\n\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult);\n}\n\nutil.inherits(BadRequest, FaunaHTTPError);\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult);\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError);\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult);\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError);\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult);\n}\n\nutil.inherits(NotFound, FaunaHTTPError);\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult);\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError);\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult);\n}\n\nutil.inherits(TooManyRequests, FaunaHTTPError);\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult);\n}\n\nutil.inherits(InternalError, FaunaHTTPError);\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult);\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError);\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\n\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description);\n}\n\nutil.inherits(StreamError, FaunaError);\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\n\nfunction StreamsNotSupported(description) {\n  FaunaError.call(this, 'StreamsNotSupported', 'streams not supported', description);\n}\n\nutil.inherits(StreamsNotSupported, StreamError);\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\n\nfunction StreamErrorEvent(event) {\n  var error = event.data || {};\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description);\n  this.event = event;\n}\n\nutil.inherits(StreamErrorEvent, StreamError);\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description);\n}\n\nutil.inherits(ClientClosed, FaunaError);\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent\n};","map":{"version":3,"sources":["/home/verified/node_modules/faunadb/src/errors.js"],"names":["util","require","FaunaError","name","message","description","Error","call","inherits","InvalidValue","InvalidArity","min","max","actual","callerFunc","arityInfo","messageForArity","documentationLink","logDocumentationLink","functionName","docsURL","toLowerCase","FaunaHTTPError","requestResult","response","responseContent","errors","length","code","prototype","raiseForStatusCode","statusCode","BadRequest","Unauthorized","PermissionDenied","NotFound","MethodNotAllowed","TooManyRequests","InternalError","UnavailableError","StreamError","StreamsNotSupported","StreamErrorEvent","event","error","data","ClientClosed","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar util = require('./_util')\n\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\nfunction FaunaError(name, message, description) {\n  Error.call(this)\n\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n  this.name = name\n\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n  this.message = message\n\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n  this.description = description\n}\n\nutil.inherits(FaunaError, Error)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message)\n}\n\nutil.inherits(InvalidValue, FaunaError)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = `${callerFunc} function requires ${messageForArity(\n    min,\n    max\n  )} argument(s) but ${actual} were given`\n  var documentationLink = logDocumentationLink(callerFunc)\n\n  FaunaError.call(this, 'InvalidArity', `${arityInfo}\\n${documentationLink}`)\n\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n  this.min = min\n\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n  this.max = max\n\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n  this.actual = actual\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min\n    if (min === null) return 'up to ' + max\n    if (min === max) return min\n    return 'from ' + min + ' to ' + max\n  }\n\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/'\n    return `For more info, see the docs: ${docsURL}${functionName.toLowerCase()}`\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError)\n\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent\n  var errors = response.errors\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code\n  var description =\n    errors.length === 0 ? '(empty \"errors\")' : errors[0].description\n  FaunaError.call(this, name, message, description)\n\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n  this.requestResult = requestResult\n}\n\nutil.inherits(FaunaHTTPError, FaunaError)\n\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\nFaunaHTTPError.prototype.errors = function() {\n  return this.requestResult.responseContent.errors\n}\n\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\nFaunaHTTPError.raiseForStatusCode = function(requestResult) {\n  var code = requestResult.statusCode\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult)\n      case 401:\n        throw new Unauthorized(requestResult)\n      case 403:\n        throw new PermissionDenied(requestResult)\n      case 404:\n        throw new NotFound(requestResult)\n      case 405:\n        throw new MethodNotAllowed(requestResult)\n      case 429:\n        throw new TooManyRequests(requestResult)\n      case 500:\n        throw new InternalError(requestResult)\n      case 503:\n        throw new UnavailableError(requestResult)\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult)\n    }\n  }\n}\n\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult)\n}\n\nutil.inherits(BadRequest, FaunaHTTPError)\n\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult)\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError)\n\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult)\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError)\n\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult)\n}\n\nutil.inherits(NotFound, FaunaHTTPError)\n\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult)\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError)\n\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult)\n}\n\nutil.inherits(TooManyRequests, FaunaHTTPError)\n\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult)\n}\n\nutil.inherits(InternalError, FaunaHTTPError)\n\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult)\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError)\n\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description)\n}\n\nutil.inherits(StreamError, FaunaError)\n\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\nfunction StreamsNotSupported(description) {\n  FaunaError.call(\n    this,\n    'StreamsNotSupported',\n    'streams not supported',\n    description\n  )\n}\n\nutil.inherits(StreamsNotSupported, StreamError)\n\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\nfunction StreamErrorEvent(event) {\n  var error = event.data || {}\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description)\n  this.event = event\n}\n\nutil.inherits(StreamErrorEvent, StreamError)\n\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description)\n}\n\nutil.inherits(ClientClosed, FaunaError)\n\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent,\n}\n"]},"metadata":{},"sourceType":"script"}