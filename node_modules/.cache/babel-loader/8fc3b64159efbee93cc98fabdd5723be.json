{"ast":null,"code":"/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\nimport { EventTarget, defineEventAttribute } from 'event-target-shim';\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\n\nclass AbortSignal extends EventTarget {\n  /**\n   * AbortSignal cannot be constructed directly.\n   */\n  constructor() {\n    super();\n    throw new TypeError(\"AbortSignal cannot be constructed directly\");\n  }\n  /**\n   * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n   */\n\n\n  get aborted() {\n    const aborted = abortedFlags.get(this);\n\n    if (typeof aborted !== \"boolean\") {\n      throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n    }\n\n    return aborted;\n  }\n\n}\n\ndefineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\n\nfunction createAbortSignal() {\n  const signal = Object.create(AbortSignal.prototype);\n  EventTarget.call(signal);\n  abortedFlags.set(signal, false);\n  return signal;\n}\n/**\n * Abort a given signal.\n */\n\n\nfunction abortSignal(signal) {\n  if (abortedFlags.get(signal) !== false) {\n    return;\n  }\n\n  abortedFlags.set(signal, true);\n  signal.dispatchEvent({\n    type: \"abort\"\n  });\n}\n/**\n * Aborted flag for each instances.\n */\n\n\nconst abortedFlags = new WeakMap(); // Properties should be enumerable.\n\nObject.defineProperties(AbortSignal.prototype, {\n  aborted: {\n    enumerable: true\n  }\n}); // `toString()` should return `\"[object AbortSignal]\"`\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n  Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n    configurable: true,\n    value: \"AbortSignal\"\n  });\n}\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\n\n\nclass AbortController {\n  /**\n   * Initialize this controller.\n   */\n  constructor() {\n    signals.set(this, createAbortSignal());\n  }\n  /**\n   * Returns the `AbortSignal` object associated with this object.\n   */\n\n\n  get signal() {\n    return getSignal(this);\n  }\n  /**\n   * Abort and signal to any observers that the associated activity is to be aborted.\n   */\n\n\n  abort() {\n    abortSignal(getSignal(this));\n  }\n\n}\n/**\n * Associated signals.\n */\n\n\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\n\nfunction getSignal(controller) {\n  const signal = signals.get(controller);\n\n  if (signal == null) {\n    throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n  }\n\n  return signal;\n} // Properties should be enumerable.\n\n\nObject.defineProperties(AbortController.prototype, {\n  signal: {\n    enumerable: true\n  },\n  abort: {\n    enumerable: true\n  }\n});\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n  Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n    configurable: true,\n    value: \"AbortController\"\n  });\n}\n\nexport default AbortController;\nexport { AbortController, AbortSignal };","map":{"version":3,"sources":["../src/abort-signal.ts","../src/abort-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    // Event,\n    EventTarget,\n    // Type,\n    defineEventAttribute,\n} from \"event-target-shim\"\n\n// Known Limitation\n//   Use `any` because the type of `AbortSignal` in `lib.dom.d.ts` is wrong and\n//   to make assignable our `AbortSignal` into that.\n//   https://github.com/Microsoft/TSJS-lib-generator/pull/623\ntype Events = {\n    abort: any // Event & Type<\"abort\">\n}\ntype EventAttributes = {\n    onabort: any // Event & Type<\"abort\">\n}\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nexport default class AbortSignal extends EventTarget<Events, EventAttributes> {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    public constructor() {\n        super()\n        throw new TypeError(\"AbortSignal cannot be constructed directly\")\n    }\n\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    public get aborted(): boolean {\n        const aborted = abortedFlags.get(this)\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(\n                `Expected 'this' to be an 'AbortSignal' object, but got ${\n                    this === null ? \"null\" : typeof this\n                }`,\n            )\n        }\n        return aborted\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\")\n\n/**\n * Create an AbortSignal object.\n */\nexport function createAbortSignal(): AbortSignal {\n    const signal = Object.create(AbortSignal.prototype)\n    EventTarget.call(signal)\n    abortedFlags.set(signal, false)\n    return signal\n}\n\n/**\n * Abort a given signal.\n */\nexport function abortSignal(signal: AbortSignal): void {\n    if (abortedFlags.get(signal) !== false) {\n        return\n    }\n\n    abortedFlags.set(signal, true)\n    signal.dispatchEvent<\"abort\">({ type: \"abort\" })\n}\n\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap<AbortSignal, boolean>()\n\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n})\n\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    })\n}\n","import AbortSignal, { abortSignal, createAbortSignal } from \"./abort-signal\"\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nexport default class AbortController {\n    /**\n     * Initialize this controller.\n     */\n    public constructor() {\n        signals.set(this, createAbortSignal())\n    }\n\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    public get signal(): AbortSignal {\n        return getSignal(this)\n    }\n\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    public abort(): void {\n        abortSignal(getSignal(this))\n    }\n}\n\n/**\n * Associated signals.\n */\nconst signals = new WeakMap<AbortController, AbortSignal>()\n\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller: AbortController): AbortSignal {\n    const signal = signals.get(controller)\n    if (signal == null) {\n        throw new TypeError(\n            `Expected 'this' to be an 'AbortController' object, but got ${\n                controller === null ? \"null\" : typeof controller\n            }`,\n        )\n    }\n    return signal\n}\n\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n})\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    })\n}\n\nexport { AbortController, AbortSignal }\n"]},"metadata":{},"sourceType":"module"}